#!/bin/bash

# btest - Bash Testing Framework
# Version: 0.3.0
# Author: Murat Ãœnalan <murat.uenalan@gmail.com>

set -e

BT_HARNESS_VERSION=0.02

if [[ ! "$BT_OPT_DIR" ]]; then

    export BT_OPT_DIR=/usr/local/lib/btest/

fi

if [ ! -z "$BT_HARNESS_PROVE" ]; then

    PROVE_AVAIL=`which prove`

    if [[ "$PROVE_AVAIL" ]]; then

	BT_HARNESS_PROVE=1

    else

	BT_HARNESS_PROVE=0

    fi

fi


# Source the btest library

source $BT_OPT_DIR/btest.bash


# Function to display help
function display_help() {
    cat << EOF
Usage: btest <command> [options]

Commands:
  file       Run tests on specific files
  folder     Run tests on all files in a folder
  generate   Generate a new test file
  status     Show available tests
  help       Display help for a specific command

Run 'btest help <command>' for more information on a specific command.

Global Options:
  -v, --version   Display the version of btest
  -h, --help      Display this help message
EOF
}

# Function to display version
function display_version() {

    echo "BT_VERSION=$BT_VERSION"

}

# Subcommand functions

# Function to parse options
function parse_options() {
    while [[ $# -gt 0 ]]; do
	case $1 in
	    -r|--reporter)
		BT_OPT_REPORTER=${2:-$BT_OPT_REPORTER_DEFAULT}
		shift 2
		;;
	    -o|--output)
		BT_OPT_OUTPUT_FILE=${2:-$BT_OPT_OUTPUT_FILE_DEFAULT}
		shift 2
		;;
	    -l|--loglevel)
		BT_OPT_LOG_LEVEL=${2:-$BT_OPT_LOG_LEVEL_DEFAULT}
		shift 2
		;;
	    -v|--verbose)
		BT_OPT_VERBOSE=${BT_OPT_VERBOSE_DEFAULT:-1}
		shift
		;;
	    -p|--parallel)
		BT_OPT_PARALLEL=${BT_OPT_PARALLEL_DEFAULT:-0}
		shift
		;;
	    -t|--tree)
		BT_OPT_FLAG_TREE=${BT_OPT_FLAG_TREE_DEFAULT:-0}
		shift 
		;;
	    -d|--dry-run)
		BT_OPT_FLAG_DRY_RUN=${BT_OPT_FLAG_DRY_RUN_DEFAULT:-0}
		shift
		;;
	    -h|--help)
		return 1  # Will trigger help display
		;;
	    *)
		break  # Exit the loop if we hit an unknown option or a file/folder name
		;;
	esac
    done

    return 0
}

function cmd_version() {

    display_version

}

function cmd_file() {
    local OPTIND
    OPTIND=1
    
    if ! parse_options "$@"; then
	cmd_help file
	return 1
    fi
    
    shift $((OPTIND-1))
    
    if [ $# -eq 0 ]; then
        echo "Error: No files specified" >&2
        cmd_help file
        return 1
    fi

    [ "$BT_OPT_VERBOSE" = "1" ] && bt_echo "OPT: Verbose mode enabled"
    [ "$BT_OPT_LOG_LEVEL" ] && bt_echo "OPT: Log level set to $BT_OPT_LOG_LEVEL"
    [ "$BT_OPT_FLAG_DRY_RUN" = "1" ] && bt_echo "OPT: Dry run mode enabled"

    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "Error: File not found: $file" >&2
            continue
        fi
        echo "Running tests in file: $file"
        [ "$BT_OPT_FLAG_DRY_RUN" != "1" ] && bash "$file"
    done
}

function cmd_folder() {

    local OPTIND
    OPTIND=1

    if ! parse_options "$@"; then
	cmd_help file
	return 1
    fi
    
    shift $((OPTIND-1))

    if [ $# -eq 0 ]; then
        echo "Error: No folder specified" >&2
        cmd_help folder
        return 1
    fi

    [ "$BT_OPT_VERBOSE" = "1" ] && bt_echo "OPT: Verbose mode enabled"
    [ "$BT_OPT_LOG_LEVEL" ] && bt_echo "OPT: Log level set to $BT_OPT_LOG_LEVEL"
    [ "$BT_OPT_FLAG_PARALLEL" = "1" ] && bt_echo "OPT: Parallel execution enabled"
    [ "$BT_OPT_FLAG_DRY_RUN" = "1" ] && bt_echo "OPT: Dry run mode enabled"
    [ "$BT_OPT_FLAG_TREE" = "1" ] && bt_echo "OPT: Tree enabled"

    for folder in "$@"; do
        if [ ! -d "$folder" ]; then
            echo "Error: Folder not found: $folder" >&2
            continue
        fi

        echo "FOLDER: Test results in folder: $folder "

        if [ "$PARALLEL" = "1" ]; then
            find "$folder" -name "*_test.bash" -type f | xargs -P0 -I{} bash {}
        else

            if [[ "$BT_OPT_FLAG_TREE" -gt 0 ]]; then
                
            for file in $(find "$folder" -name "*_test.bash" -type f); do
                if [ -f "$file" ]; then
                    echo "  FILE: Test file: $file"
                    [ "$BT_OPT_FLAG_DRY_RUN" != "1" ] && bash "$file"
                fi
            done

            else

                for file in $(find "$folder" -maxdepth 1 -name "*_test.bash" -type f); do
                    if [ -f "$file" ]; then
                        echo "  FILE: Test file: $file"
                        [ "$BT_OPT_FLAG_DRY_RUN" != "1" ] && bash "$file"
                    fi
                done

            fi
            
        fi
    done
}

function cmd_generate() {
    local OPTIND
    OPTIND=1

    while getopts ":o:h" opt; do
        case $opt in
            o) BT_OPT_OUTPUT_DIR=${OPTARG:-$BT_OPT_OUTPUT_DIR_DEFAULT} ;;
            h) cmd_help generate; return ;;
            :) echo "Option -$OPTARG requires an argument." >&2; return 1 ;;
            \?) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    if [ $# -eq 0 ]; then
        echo "Error: No test name specified" >&2
        cmd_help generate
        return 1
    fi

    test_name=$1
    output_dir=${BT_OPT_OUTPUT_DIR:-$PWD}
    output_file="$output_dir/${test_name}_test.bash"

    cat > "$output_file" << EOF
#!/bin/bash

source \$BT_OPT_DIR/btest.bash

bt_begin "$test_name" 1

  bt_declare "Example test"
  # Add your test logic here
  bt_ok

bt_end
EOF

    echo "Generated test file: $output_file"
}

function cmd_status() {
    local OPTIND
    OPTIND=1

    while getopts ":vl:" opt; do
        case $opt in
            v) OPT_VERBOSE=${BT_OPT_VERBOSE:-1} ;;
            l) LOG_LEVEL=${OPTARG:-$BT_OPT_LOG_LEVEL} ;;
            :) echo "Option -$OPTARG requires an argument." >&2; return 1 ;;
            \?) echo "Invalid option: -$OPTARG" >&2; return 1 ;;
        esac
    done
    shift $((OPTIND-1))

    [ "$BT_OPT_VERBOSE" = "1" ] && bt_echo "OPT: Verbose mode enabled"
    [ "$BT_OPT_LOG_LEVEL" ] && bt_echo "OPT: Log level set to $BT_OPT_LOG_LEVEL"

    if ! command -v tree &> /dev/null; then
        echo "Error: 'tree' command not found. Please install it to use the status command." >&2
        return 1
    fi

    echo "Available tests:"
    tree -P "*_test.bash" --prune
}

function cmd_help() {
    case $1 in
        file)
            cat << EOF
Usage: btest file [options] <file1> [file2 ...]

Run tests on specific files.

Options:
  -r <reporter>   Specify the reporter to use (default: tap)
  -o <file>       Write output to a file instead of stdout
  -v, --verbose   Enable verbose output
  -l, --loglevel  Set the log level
  -d, --dry-run   Perform a dry run without executing tests

Environment variables:
  BT_REPORTER      Set the default reporter
  BT_OUTPUT_FILE   Set the default output file
  BT_OPT_VERBOSE       Set verbose mode (0 or 1)
  BT_OPT_LOG_LEVEL     Set the default log level
  BT_OPT_FLAG_DRY_RUN       Set dry run mode (0 or 1)
EOF
            ;;
        folder)
            cat << EOF
Usage: btest folder [options] <folder1> [folder2 ...]

Run tests on all files in specified folders.

Options:
  -r <reporter>   Specify the reporter to use (default: tap)
  -o <file>       Write output to a file instead of stdout
  -v, --verbose   Enable verbose output
  -l, --loglevel  Set the log level
  -p, --parallel  Run tests in parallel
  -d, --dry-run   Perform a dry run without executing tests
  -t              Tree of tests (descend into all subfolders)

Environment variables:
  BT_REPORTER      Set the default reporter
  BT_OUTPUT_FILE   Set the default output file
  BT_OPT_VERBOSE       Set verbose mode (0 or 1)
  BT_OPT_LOG_LEVEL     Set the default log level
  BT_OPT_PARALLEL      Set parallel execution mode (0 or 1)
  BT_OPT_FLAG_DRY_RUN       Set dry run mode (0 or 1)
  BT_OPT_FLAG_TREE Set the default subfolder behavior
EOF
            ;;
        generate)
            cat << EOF
Usage: btest generate [options] <test_name>

Generate a new test file.

Options:
  -o <directory>  Specify the output directory (default: current directory)

Environment variables:
  BT_OPT_OUTPUT_DIR_DEFAULT    Set the default output directory
EOF
            ;;
        status)
            cat << EOF
Usage: btest status [options]

Show available tests.

Options:
  -v, --verbose   Enable verbose output
  -l, --loglevel  Set the log level

Environment variables:
  BT_OPT_VERBOSE       Set verbose mode (0 or 1)
  BT_OPT_LOG_LEVEL     Set the default log level
EOF
            ;;
        *)
            display_help
            ;;
    esac
}





# Main command processing

BT_DECLARE_PRE="      " bt_init VERBOSE REPORTER OUTPUT_DIR EPOCH_DELTA_MIN ABORT DIR_DEFAULT DEBUG LOG_LEVEL FLAG_DRY_RUN FLAG_TREE

BT_DECLARE_PRE="export" bt_init EPOCH_DELTA_MIN PROTOCOL


case $1 in
    version)
        shift
        cmd_version "$@"
        ;;
    file)
        shift
        cmd_file "$@"
        ;;
    folder)
        shift
        cmd_folder "$@"
        ;;
    generate)
        shift
        cmd_generate "$@"
        ;;
    status)
        shift
        cmd_status "$@"
        ;;
    help)
        shift
        cmd_help "$@"
        ;;
    -v|--version)
        display_version
        ;;
    -h|--help)
        display_help
        ;;
    *)
        if [[ "$2" ]]; then

            echo "Error: Unknown btest subcommand '$1'" >&2

        fi

        display_help
        exit 1
        ;;
esac
